openapi: 3.0.3
info:
  title: Plataforma de Gestión de Usuarios y Productos - OpenAPI 3.0
  description: |-
    Esta API facilita la administración integral de usuarios y productos para sistemas comerciales. 
    Permite registrar, actualizar, consultar y eliminar información de forma eficiente y segura.
    
    Recursos adicionales:
    - [Repositorio del Proyecto](https://github.com/irisg639/apixtra2)
    - [Referencia de la Especificación OpenAPI](https://swagger.io/specification/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: al222310595@gmail.com
  license:
    name: Licencia Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0

externalDocs:
  description: Documentación Oficial de OpenAPI
  url: https://swagger.io/docs/

servers:
  - url: https://18.220.5.238

tags:
  - name: users
    description: Operaciones relacionadas con la gestión de usuarios.
  - name: productos
    description: Funcionalidades de inventario de productos.

paths:
  /usuarios:
    get:
      tags:
        - users
      summary: Listar usuarios
      description: Recupera todos los registros de usuarios disponibles en el sistema.
      operationId: listarUsuarios
      responses:
        '200':
          description: Usuarios recuperados exitosamente.
        '500':
          description: Fallo interno del servidor.

  /usuarios/{id}:
    get:
      tags:
        - users
      summary: Consultar usuario específico
      description: Obtiene la información detallada de un usuario mediante su ID único.
      operationId: obtenerUsuario
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador único del usuario.
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado exitosamente.
        '404':
          description: No se encontró el usuario.
        '500':
          description: Error de procesamiento en servidor.

  /usuarios/create:
    post:
      tags:
        - users
      summary: Registrar nuevo usuario
      description: Crea un nuevo usuario en la plataforma utilizando los datos proporcionados.
      operationId: registrarUsuario
      requestBody:
        description: Información requerida para la creación de un usuario.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Usuario registrado exitosamente.
        '400':
          description: Error en los datos de entrada.

  /usuarios/edit/{id}:
    post:
      tags:
        - users
      summary: Actualizar datos de usuario
      description: Modifica la información existente de un usuario identificado por su ID.
      operationId: actualizarUsuario
      parameters:
        - name: id
          in: path
          required: true
          description: ID del usuario a modificar.
          schema:
            type: integer
      requestBody:
        description: Nuevos datos para el usuario.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Usuario actualizado exitosamente.
        '404':
          description: Usuario no localizado.
        '500':
          description: Error en la operación de actualización.

  /usuarios/delete/{id}:
    delete:
      tags:
        - users
      summary: Remover usuario
      description: Elimina de forma definitiva un usuario del sistema mediante su ID.
      operationId: eliminarUsuario
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del usuario a eliminar.
          schema:
            type: integer
      responses:
        '200':
          description: Usuario eliminado correctamente.
        '404':
          description: Usuario no encontrado.
        '500':
          description: Error durante la eliminación.

  /usuarios/login:
    post:
      tags:
        - users
      summary: Autenticación de usuario
      description: Permite el acceso a usuarios registrados mediante correo electrónico y contraseña.
      operationId: autenticarUsuario
      requestBody:
        description: Credenciales de acceso.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Autenticación exitosa.
        '401':
          description: Fallo de autenticación.

  /productos:
    get:
      tags:
        - productos
      summary: Listar productos
      description: Muestra el inventario completo de productos disponibles.
      operationId: listarProductos
      responses:
        '200':
          description: Productos listados exitosamente.
        '500':
          description: Error interno al listar productos.

  /productos/{id}:
    get:
      tags:
        - productos
      summary: Consultar producto específico
      description: Permite obtener los detalles de un producto usando su identificador.
      operationId: obtenerProducto
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del producto.
          schema:
            type: string
      responses:
        '200':
          description: Producto encontrado.
        '404':
          description: Producto no disponible.
        '500':
          description: Error interno.

  /productos/crear:
    post:
      tags:
        - productos
      summary: Agregar nuevo producto
      description: Registra un nuevo producto en el catálogo.
      operationId: agregarProducto
      requestBody:
        description: Datos necesarios para el alta del producto.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Producto agregado correctamente.
        '400':
          description: Error en la solicitud de creación.

  /productos/editar/{id}:
    post:
      tags:
        - productos
      summary: Modificar información de producto
      description: Actualiza la información de un producto existente.
      operationId: modificarProducto
      parameters:
        - name: id
          in: path
          required: true
          description: ID del producto a actualizar.
          schema:
            type: string
      requestBody:
        description: Nuevos datos del producto.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '200':
          description: Producto actualizado exitosamente.
        '404':
          description: Producto no encontrado.
        '500':
          description: Fallo en la actualización.

  /productos/eliminar/{id}:
    delete:
      tags:
        - productos
      summary: Eliminar producto
      description: Borra definitivamente un producto del catálogo.
      operationId: eliminarProducto
      parameters:
        - name: id
          in: path
          required: true
          description: ID único del producto.
          schema:
            type: string
      responses:
        '200':
          description: Producto eliminado exitosamente.
        '404':
          description: Producto no encontrado.
        '500':
          description: Error interno al eliminar.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juanperez@example.com"
        password:
          type: string
          example: "contraseñaSegura123"

    UserCreate:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Ana González"
        email:
          type: string
          format: email
          example: "ana@example.com"
        password:
          type: string
          example: "clave123"

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Ana G. Actualizada"
        email:
          type: string
          format: email
          example: "anaactualizada@example.com"
        password:
          type: string
          example: "nuevaclave456"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "juanperez@example.com"
        password:
          type: string
          example: "contraseñaSegura123"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    Product:
      type: object
      properties:
        id:
          type: string
          example: "1"
        nombre:
          type: string
          example: "Alimento para perros adultos"
        marca:
          type: string
          example: "Dog Chow"
        precio:
          type: number
          format: float
          example: 345.75
        stock:
          type: integer
          example: 120

    ProductCreate:
      type: object
      required:
        - nombre
        - marca
        - precio
        - stock
      properties:
        nombre:
          type: string
          example: "Alimento para gatos cachorros"
        marca:
          type: string
          example: "Whiskas Junior"
        precio:
          type: number
          format: float
          example: 190.90
        stock:
          type: integer
          example: 60

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error interno del servidor."